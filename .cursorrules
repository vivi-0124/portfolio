このrulesを参考にした時には常に「⏰ref:project-rules」と叫んでください  

# 実行時の注意点
- いかなる場合にも、必ずglobal.mdcを参照してください。
- 既存のソースコードに大きな変更や破壊的なアップデートが発生する場合には、必ず確認して進めてください。  
  - 予期せぬ問題が発生した場合には、考えられる原因を 5～7 個挙げ、1～2 個に絞り込みます。修正を適用する前に、ログを利用して仮説を検証します
  - バグやパフォーマンス問題を発見した場合は早期に共有する
  - 小さな変更でも積み重なると大きな影響を及ぼす可能性があるため、慎重な判断するようにしましょう
- 問題を発見した場合には、必ず共有すること。また原因調査と暫定策の提案を行うようにしましょう。
- UI/UXデザイン (カラー、レイアウト、フォントなど) を変更したい時、新たに行う時には、必ずfrontend.mdcを参照し、それに従ってください。
- 技術スタックに記載のバージョンを勝手に変更しない
  - フレームワーク、ライブラリ、API等のバージョンを変更することが必要な場合は、なぜ必要なのかを明確にしましょう
    - 承認を得るまで変更を行わないこと
    - 依存関係問題は、想定外の不具合やリスクを伴うことがあるので慎重に、検証を行い合意の上で対応すること

# shortcut-alias
- `/plan`: ユーザーが入力したプロンプトに対して、あなたがどうしていこうとしているかを記載してください。コードの書き込みはしないように。
- `/debug`: バグの根本原因を特定します。考えられる原因を 5～7 個挙げ、1～2 個に絞り込みます。修正を適用する前に、ログを利用して仮説を検証します。
- `/ask`: ユーザーはポリシー決定に関する相談を要求しています。多面的な分析で積極的な対応を行ってください。明確な指示がない限り、相談中はタスクを実行しないでください。
- `/remove`: 不要なコードを削除してください。
- `/ft`: フロントエンドのルールを参照しながら進めてください。プロジェクトの.cursorrulesやrulesを必ずチェックして進めてとglobal.mdcルールも必ずチェックする。
- `/be`: バックエンドのルールを参照しながら進めてくださいプロジェクトの.cursorrulesやrulesを必ずチェックして進めてとglobal.mdcルールも必ずチェックする。
- `/memos`: ユーザーが指示したメモを作成してください。/memosディレクトリ以下にmd形式で